
---

## ðŸ–¥ `quantity_engine.py` (transparent calculation skeleton)

```python
"""
quantity_engine.py
Transparent calculation logic for Ethiopian-standard BoQ preparation.
All quantities are formula-driven and fully auditable.
"""

import pandas as pd
from datetime import date

# Example rate table loader
def load_rate_table(path: str) -> pd.DataFrame:
    """
    Load a CSV rate table with columns: item_code, description, unit, rate_ETB
    """
    return pd.read_csv(path)

# Core quantity calculations
def calc_wall_area(length_m, height_m, openings_area_m2=0.0, wastage_factor=0.0):
    """
    Calculates net wall area with wastage.
    Formula: (L x H) - openings + wastage%
    """
    gross_area = length_m * height_m
    net_area = gross_area - openings_area_m2
    wastage = net_area * (wastage_factor / 100)
    return round(net_area + wastage, 3)

def calc_volume(area_m2, thickness_mm):
    """
    Converts wall area to volume.
    """
    thickness_m = thickness_mm / 1000.0
    return round(area_m2 * thickness_m, 3)

def calc_cost(quantity, rate):
    """
    Multiplies quantity by rate (ETB).
    """
    return round(quantity * rate, 2)

# BoQ generator
def generate_boq(records, rate_table):
    """
    records: list of dicts: {item_code, description, qty, unit}
    rate_table: DataFrame with item_code, rate_ETB
    """
    boq_df = pd.DataFrame(records)
    boq_df = boq_df.merge(rate_table, on='item_code', how='left')
    boq_df['total_ETB'] = boq_df.apply(lambda r: calc_cost(r['qty'], r['rate_ETB']), axis=1)
    boq_df['date'] = date.today().isoformat()
    return boq_df

if __name__ == "__main__":
    # Example usage
    rates = load_rate_table("rate_tables/RateTables-20250819.csv")
    walls = [
        {"item_code": "W001", "description": "230mm Brick Wall", 
         "qty": calc_volume(calc_wall_area(5, 3, openings_area_m2=1.2, wastage_factor=5), 230),
         "unit": "m3"}
    ]
    boq = generate_boq(walls, rates)
    print(boq)